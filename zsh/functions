### Utility

# Quick look

function ql {
    qlmanage -p &>/dev/null $1 &
}

# Get image size

function imgsize {
    local width height
    if [[ -f $1 ]]; then
        height=$(sips -g pixelHeight "$1"|tail -n 1|awk '{print $2}')
        width=$(sips -g pixelWidth "$1"|tail -n 1|awk '{print $2}')
        echo "${width} x ${height}"
    else
        echo "File not found"
    fi
}

# Remove files to .Trash
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}


### Git
# Commit verbose with command line free from commit message
function gg() {
    git commit -v -a -m "$*"
}


# tar/zip extraction

function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar -jxvf $1                                 ;;
            *.tar.gz)  tar -zxvf $1                                 ;;
            *.bz2)     bunzip2 $1                                   ;;
            *.dmg)     hdiutil mount $1                             ;;
            *.gz)      gunzip $1                                    ;;
            *.tar)     tar -xvf $1                                  ;;
            *.tbz2)    tar -jxvf $1                                 ;;
            *.tgz)     tar -zxvf $1                                 ;;
            *.zip)     unzip $1                                     ;;
            *.ZIP)     unzip $1                                     ;;
            *.pax)     cat $1 | pax -r                              ;;  
            *.pax.1)   uncompress $1 --stdout | pax -r              ;;
            *.Z)       uncompress $1                                ;;
            *)         echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


